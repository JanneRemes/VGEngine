
#pragma once

#include "engine/game/component.h"
#include "engine/graphics/vertexBuffer.h"
#include "engine/graphics/indexBuffer.h"
#include "engine/utility/Vector2.h"
#include "engine/assets/fileManager.h"
#include "engine/graphics/shader.h"
#include "engine/game/transformComponent.h"
#include "engine\graphics\opengl.h"
#include <vector>
#include <string>
#include <ft2build.h>
#include FT_FREETYPE_H

namespace vg
{
	/**
	Class used for showing text on screen, utilizes freetype
	*/
    class TextComponent : public Component
    {
    public:
		/**
		Initializes freetype library and creates new font face
		@param Path to where font file is located
		@param Filemanager to load in the fontfile
		@param Fontsize, optional and 12 if not set
		*/
        TextComponent(std::string& fontPath, core::FileManager *manager, unsigned int fontSize = 12);
        
		/**
		Deletes vertex and indexBuffers
		*/
		~TextComponent();
        
		//void draw(graphics::Shader* shader, TransformComponent* transform);

		/**
		Changes the string to render
		@param String to render
		*/
        void setText(std::string text);

		/**
		@return current text value 
		*/
		std::string getText();

		/**
		Changes font size
		@param New font size int
		*/
        void setFontSize(unsigned int fontSize);

		/**
		@return texture id used by shader
		*/
		unsigned int getTextureId();

		/**
		@return current glyph generated by FreeType
		*/
		FT_GlyphSlot* getGlyph();

		/**
		@ return face generated by FreeType
		*/
		FT_Face* getFace();

		/**
		@return current VertexBuffer
		*/
		graphics::VertexBuffer* getVertexBuffer();

		/**
		@return current IndexBuffer
		*/
		graphics::IndexBuffer* getIndexBuffer();

		/**
		Colour values ranging from 0 - 255
		*/
		void setColour(unsigned int red, unsigned int green, unsigned int blue, unsigned int alpha = 255);

    private:

		/**
		Generate face from font using FreeType
		*/
		void initializeFace();

        /**
        Default vertices
        */
		std::vector<float> defaultVertices;

        /**
        Default indices
        */
		std::vector<unsigned short> defaultIndices;

        unsigned int mTexture;				        ///< <Font texture ID>
        graphics::VertexBuffer* mVertexBuffer;	///< <Vertex buffer for drawing>
        graphics::IndexBuffer* mIndexBuffer;	///< <Index buffer for drawing>

        std::vector<FT_Byte> mCharData;	        ///< <Vector where fontfile is saved>
        std::string mText;				        ///< <String to render>
        FT_Face mFace;					        ///< <Face that includes the loaded font>
        FT_GlyphSlot mGlyph;			        ///< <Slot where each glyph is saved>
        FT_UInt mFontSize;				        ///< <Fontsize for text>
    };
}
